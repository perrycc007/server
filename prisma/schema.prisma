generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model profile {
  idprofile             Int       @id @default(autoincrement())
  userid                Int       @unique(map: "Profile_userId_key")
  availtime             String?   @db.VarChar(600)
  address               String?   @db.VarChar(45)
  agreewith             String?   @db.VarChar(45)
  country               String?   @db.VarChar(45)
  emergencycontact      String?   @db.VarChar(45)
  emergencyphone        String?   @db.VarChar(45)
  emergencyrelationship String?   @db.VarChar(45)
  findus                String?   @db.VarChar(45)
  language              String?   @db.VarChar(45)
  name                  String?   @db.VarChar(45)
  nationality           String?   @db.VarChar(45)
  phoneno               String?   @db.VarChar(45)
  lastOnline            DateTime? @db.DateTime(0)
  user                  user      @relation(fields: [userid], references: [userid], map: "Profile_userId_fkey")
}

model user {
  userid           Int      @id @default(autoincrement())
  email            String   @db.VarChar(45)
  password         String   @db.TinyText
  favouritecaseid  Json?
  favouritetutorid Json?
  profile          profile?
  tutor            tutor[]
}

model student {
  studentid         Int       @id @default(autoincrement())
  userid            Int?
  subject           String?   @db.VarChar(300)
  availtime         String?   @db.VarChar(45)
  lowestfrequency   Int?
  lowestfee         Int?
  lowestduration    Int?
  language          String?   @db.VarChar(45)
  others            String?   @db.VarChar(45)
  expectation       String?   @db.VarChar(45)
  genderrequirement String?   @db.VarChar(45)
  status            String?   @db.VarChar(45)
  location          Json?
  highestfee        Int?
  highestfrequency  Int?
  highestduration   Int?
  level             String?   @db.VarChar(45)
  lastOnline        DateTime? @db.DateTime(0)
}

model apply {
  idapply Int    @id @default(autoincrement())
  subject String @db.VarChar(45)
  place   String @db.VarChar(45)
  userid  Int    @unique(map: "Apply_userId_key")
}

model tutor {
  tutorid              Int       @id @default(autoincrement())
  userid               Int?
  location             Json?
  availtime            String?   @db.VarChar(45)
  intro                String?   @db.VarChar(45)
  language             String?   @db.VarChar(45)
  occupation           String?   @db.VarChar(45)
  secondaryschool      String?   @db.VarChar(45)
  primaryschool        String?   @db.VarChar(45)
  yearofexperience     String?   @db.VarChar(45)
  experience           String?   @db.VarChar(45)
  highestteachinglevel String?   @db.VarChar(45)
  educationallevel     String?   @db.VarChar(45)
  notes                String?   @db.VarChar(45)
  schoolcat            String?   @db.VarChar(45)
  year                 String?   @db.VarChar(45)
  publicexamgrade      String?   @db.VarChar(45)
  university           String?   @db.VarChar(45)
  othercert            String?   @db.VarChar(45)
  caseid               String?   @db.VarChar(45)
  major                String?   @db.VarChar(45)
  subgrade             String?   @db.VarChar(2000)
  strength             String?   @db.VarChar(45)
  subject              Json?
  highestfee           Int?
  lowestfee            Int?
  matchedbefore        Json?
  status               String?   @default("open") @db.VarChar(45)
  lastOnline           DateTime? @db.DateTime(0)
  verify               String?   @default("未驗證") @db.VarChar(45)
  user                 user?     @relation(fields: [userid], references: [userid], onDelete: Restrict, map: "tutor_userid_key")

  @@index([userid], map: "tutor_userid_key_idx")
}

model match {
  idmatch       Int     @id @default(autoincrement())
  studentid     Int?    @unique(map: "studentid_UNIQUE")
  availtutor    Json?
  notavailtutor Json?
  checking      Json?
  checked       Json?
  status        String? @default("open") @db.VarChar(45)
}
