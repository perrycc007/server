generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model profile {
  idprofile             Int       @id @default(autoincrement())
  userid                Int       @unique
  availtime             String?   @db.VarChar(600)
  address               String?   @db.VarChar(45)
  agreewith             String?   @db.VarChar(45)
  country               String?   @db.VarChar(45)
  emergencycontact      String?   @db.VarChar(45)
  emergencyphone        String?   @db.VarChar(45)
  emergencyrelationship String?   @db.VarChar(45)
  findus                String?   @db.VarChar(45)
  language              String?   @db.VarChar(45)
  name                  String?   @db.VarChar(45)
  nationality           String?   @db.VarChar(45)
  phoneno               String?   @db.VarChar(45)
  lastOnline            DateTime? @db.DateTime(0)
  user                  user      @relation(fields: [userid], references: [userid])
}

model user {
  userid           Int         @id @default(autoincrement())
  email            String      @unique @db.VarChar(45)
  password         String      @db.TinyText
  favouritecaseid  Json?
  favouritetutorid Json?
  role             Role        @default(USER)
  favourites       favourite[]
  profile          profile?
  students         student[]
  tutor            tutor?
}

model favourite {
  idfavourite Int     @id @default(autoincrement())
  userid      Int
  studentid   Int?
  tutorid     Int?
  student     student? @relation(fields: [studentid], references: [studentid])
  tutor       tutor?   @relation(fields: [tutorid], references: [tutorid])
  user        user    @relation(fields: [userid], references: [userid])

  @@index([studentid], map: "favourite_studentid_fkey")
  @@index([tutorid], map: "favourite_tutorid_fkey")
  @@index([userid], map: "favourite_userid_fkey")
}

model student {
  studentid          Int                @id @default(autoincrement())
  lowestfrequency    Int?
  lowestfee          Int?
  lowestduration     Int?
  language           String?            @db.VarChar(45)
  others             String?            @db.VarChar(45)
  expectation        String?            @db.VarChar(45)
  genderrequirement  String?            @db.VarChar(45)
  status             open_status        @default(OPEN) 
  highestfee         Int?
  highestfrequency   Int?
  highestduration    Int?
  level              String?            @db.VarChar(45)
  lastOnline         DateTime?          @db.DateTime(0)
  userid             Int
  completeFormStatus Boolean            @default(false)
  favourites         favourite[]
  matches            matchTable[]
  user               user               @relation(fields: [userid], references: [userid])
  studentavailtime   studentavailtime[]
  studentlocation    studentlocation[]
  studentsubject     studentsubject[]

  @@index([userid], map: "student_userid_fkey")
}

model tutor {
  tutorid              Int              @id @default(autoincrement())
  userid               Int?             @unique
  intro                String?          @db.VarChar(45)
  language             String?          @db.VarChar(45)
  occupation           String?          @db.VarChar(45)
  secondaryschool      String?          @db.VarChar(45)
  primaryschool        String?          @db.VarChar(45)
  yearofexperience     String?          @db.VarChar(45)
  experience           String?          @db.VarChar(45)
  highestteachinglevel String?          @db.VarChar(45)
  educationallevel     String?          @db.VarChar(45)
  notes                String?          @db.VarChar(45)
  schoolcat            String?          @db.VarChar(45)
  year                 String?          @db.VarChar(45)
  publicexamgrade      String?          @db.VarChar(45)
  university           String?          @db.VarChar(45)
  othercert            String?          @db.VarChar(45)
  caseid               String?          @db.VarChar(45)
  major                String?          @db.VarChar(45)
  subgrade             Json?
  strength             String?          @db.VarChar(45)
  highestfee           Int?
  lowestfee            Int?
  matchedbefore        Json?
  status               open_status      @default(OPEN) 
  lastOnline           DateTime?        @db.DateTime(0)
  verify               String?          @default("未驗證") @db.VarChar(45)
  completeFormStatus   Boolean          @default(false)
  favourites           favourite[]
  matches              matchTable[]
  user                 user?            @relation(fields: [userid], references: [userid])
  tutoravailtime       tutoravailtime[]
  tutorgrade           tutorgrade[]
  tutorlocation        tutorlocation[]
  tutorsubject         tutorsubject[]

  @@index([userid], map: "tutor_userid_key_idx")
}

model matchTable {
  idmatch      Int         @id @default(autoincrement())
  studentid    Int
  availability Boolean
  checkStatus  CheckStatus
  tutorid      Int
  matchstatus  MatchStatus
  lastOnline   DateTime?          @db.DateTime(0)
  student      student     @relation(fields: [studentid], references: [studentid])
  tutor        tutor       @relation(fields: [tutorid], references: [tutorid])

  @@index([studentid], map: "matchTable_studentid_fkey")
  @@index([tutorid], map: "matchTable_tutorid_fkey")
}

model location {
  location        String?
  locationId      Int               @id @default(autoincrement())
  region          String?
  studentlocation studentlocation[]
  tutorlocation   tutorlocation[]
}

model availtime {
  id               Int                @id @default(autoincrement())
  day              availtime_day
  time             String
  studentavailtime studentavailtime[]
  tutoravailtime   tutoravailtime[]
}

model grade {
  id         Int            @id @default(autoincrement())
  area       grade_area
  examtype   grade_examtype
  subject    String?
  tutorgrade tutorgrade[]
}

model studentavailtime {
  studentId   Int
  availTimeId Int
  availtime   availtime @relation(fields: [availTimeId], references: [id], map: "StudentAvailTime_availTimeId_fkey")
  student     student   @relation(fields: [studentId], references: [studentid], map: "StudentAvailTime_studentId_fkey")

  @@id([studentId, availTimeId])
  @@index([availTimeId], map: "StudentAvailTime_availTimeId_fkey")
}

model studentlocation {
  studentId  Int
  locationId Int
  location   location @relation(fields: [locationId], references: [locationId], map: "studentLocation_locationId_fkey")
  student    student  @relation(fields: [studentId], references: [studentid], map: "studentLocation_studentid_fkey")

  @@id([studentId, locationId])
  @@index([locationId], map: "studentLocation_locationId_fkey")
}

model studentsubject {
  studentId Int
  subjectId Int
  student   student @relation(fields: [studentId], references: [studentid], map: "StudentSubject_studentId_fkey")
  subject   subject @relation(fields: [subjectId], references: [subjectId], map: "StudentSubject_subjectId_fkey")

  @@id([studentId, subjectId])
  @@index([subjectId], map: "StudentSubject_subjectId_fkey")
}

model subject {
  category       String?
  name           String?
  subjectId      Int              @id @default(autoincrement())
  studentsubject studentsubject[]
  tutorsubject   tutorsubject[]
}

model tutoravailtime {
  tutorId     Int
  availTimeId Int
  availtime   availtime @relation(fields: [availTimeId], references: [id], map: "TutorAvailTime_availTimeId_fkey")
  tutor       tutor     @relation(fields: [tutorId], references: [tutorid], map: "TutorAvailTime_tutorId_fkey")

  @@id([tutorId, availTimeId])
  @@index([availTimeId], map: "TutorAvailTime_availTimeId_fkey")
}

model tutorgrade {
  tutorId   Int
  gradeId   Int
  examGrade String?
  grade     grade   @relation(fields: [gradeId], references: [id], map: "TutorGrade_gradeId_fkey")
  tutor     tutor   @relation(fields: [tutorId], references: [tutorid], map: "TutorGrade_tutorId_fkey")

  @@id([tutorId, gradeId])
  @@index([gradeId], map: "TutorGrade_gradeId_fkey")
}

model tutorlocation {
  tutorId    Int
  locationId Int
  location   location @relation(fields: [locationId], references: [locationId], map: "tutorLocation_locationId_fkey")
  tutor      tutor    @relation(fields: [tutorId], references: [tutorid], map: "tutorLocation_tutorId_fkey")

  @@id([tutorId, locationId])
  @@index([locationId], map: "tutorLocation_locationId_fkey")
}

model tutorsubject {
  tutorId   Int
  subjectId Int
  subject   subject @relation(fields: [subjectId], references: [subjectId], map: "TutorSubject_subjectId_fkey")
  tutor     tutor   @relation(fields: [tutorId], references: [tutorid], map: "TutorSubject_tutorId_fkey")

  @@id([tutorId, subjectId])
  @@index([subjectId], map: "TutorSubject_subjectId_fkey")
}

enum CheckStatus {
  NOT_YET_CHECKED
  CHECKING
  CHECKED
}

enum MatchStatus {
  REJECTED
  ASK_AGAIN
  NO_LONGER_MATCH
  OPEN
}

enum Role {
  USER
  ADMIN
}

enum availtime_day {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum grade_area {
  LIBERAL_ARTS
  SCIENCE
  BUSINESS
  CORE_SUBJECTS
  ELECTIVE_SUBJECTS
  OTHER_LANGUAGE_SUBJECTS
  LANGUAGES
  MATHEMATICS
  HUMANITIES_AND_SOCIAL_SCIENCES
  CREATIVE_TECHNICAL_AND_VOCATIONAL
}

enum grade_examtype {
  HKDSE
  HKCEE
  IB
  HKALE
  GCEALevel
  IGCSE
}

enum open_status {
  OPEN
  CLOSE
  BLOCKED
}